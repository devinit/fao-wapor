dbDisconnect(con)
View(drv)
list.of.packages <- c("data.table","httr","RPostgreSQL","here","utils","rvest","stringr","reshape")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.us.r-project.org")
lapply(list.of.packages, require, character.only=T)
#### Read-in and manipulation ####
# Only works while running with `Rscript` from repo root, use commented below if running manually
# script.dir <- here()
script.dir = "C:/git/ddw-analyst-ui"
source(paste0(script.dir,"/data_updates/R/constants.R"))
session <- tempdir()
data <- download.file("https://unstats.un.org/sdgs/indicators/database/archive/2022_Q1.3_AllData_Before_20220412_CSV.zip",file.path(session,"dat.zip"),mode="wb")
data <- unzip(file.path(session,"dat.zip"),exdir = file.path(session,"dat.csv"))
data <- read.csv(data)
# Filter on year
data <- subset(data,data$TimePeriod>=2015)
# Mapping from countries
countries <- read_html("https://unstats.un.org/unsd/methodology/m49/overview/#")
countries <- html_table(countries)[[1]]
countries = countries[-c(1),]
countries$X10 = as.numeric(countries$X10)
data <- merge(data,countries[,c("X10","X12")],by.y = "X10", by.x = "GeoAreaCode", all.x=T)
data$X12[which(data$GeoAreaName=="Kosovo")] = "XKX"
#### Some checks that can be commented out when running automatically ####
# table(data$X12, useNA = "always")
# checks <- subset(data,is.na(data$X12)) # checks is 181851 before i do anything numeric, 100191 after.
# table(checks$GeoAreaCode, useNA = "always")
#
#
# regional_ids <- c(unique(countries$X1),unique(countries$X3),unique(countries$X5),unique(countries$X7))
# regional_ids <- as.numeric(regional_ids[which(regional_ids!="")])
# remaining <- setdiff(unique(checks$GeoAreaCode), regional_ids)
#
# checks <- subset(checks,checks$GeoAreaCode %in% remaining) # checks is only 31437 after accounting for the regional options.
# unique(checks$GeoAreaName)
#### Continue manipulation ####
# Clean up
data$X <- NULL
names(data)[which(names(data) == "X12")] <- "iso3"
data = transform(data, Holding = colsplit(Indicator, split = "\\.", names = c('a','b','c')))
data$Holding.a <- NULL
names(data)[which(names(data) == "Holding.b")] <- "TargetLevel"
names(data)[which(names(data) == "Holding.c")] <- "IndicatorLevel"
# map 1-20 as A-T and then a-f as u-Z. Do this for Goal, TargetLevel, IndicatorLevel. It can then be sorted easily.
data$Goal_letter <- letters[data$Goal]
map<-data.frame(letters,as.character(1:26))
names(map)<-c("letters","numbers")
let2nums <- function(string){
returnme <- as.character(map$numbers[map$letters==string])
returnme = as.numeric(returnme) + 20
return(returnme)
}
data$Target_letter <- letters[as.numeric(data$TargetLevel)]
data$Target_letter[which(is.na(data$Target_letter))] <- letters[unlist(lapply(data$TargetLevel[which(is.na(data$Target_letter))],let2nums))]
data$Indicator_letter <- letters[as.numeric(data$IndicatorLevel)]
data$Indicator_letter[which(is.na(data$Indicator_letter))] <- letters[unlist(lapply(data$IndicatorLevel[which(is.na(data$Indicator_letter))],let2nums))]
data$sort = paste0(data$Goal_letter,data$Target_letter,data$Indicator_letter)
data$Goal_letter = NULL
data$Target_letter = NULL
data$Indicator_letter = NULL
#### Database ####
drv = dbDriver("PostgreSQL")
# con = dbConnect(drv,
#                 dbname=db.dbname
#                 ,user=db.user
#                 ,password=db.password
#                 ,host=db.host
#                 ,port=db.port)
con = dbConnect(drv,
dbname="analyst_ui"
,user="postgres"
,password = "D0CK3R!12")
con = dbConnect(drv,
dbname="analyst_ui"
,user="postgres"
,password = "D0CK3R!12")
con = dbConnect(drv,
dbname="analyst_ui"
,user="postgres"
,password = "D0CK3R!12")
con = dbConnect(drv,
dbname="analyst_ui"
,user="postgres"
,password = "D0CK3R!12")
con = dbConnect(drv,
dbname="analyst_ui"
,user="postgres"
,password = "D0CK3R!12")
con = dbConnect(drv,
dbname="analyst_ui"
,user="postgres"
,password = "D0CK3R!12"
,host=db.host
,port=db.port)
con = dbConnect(drv,
dbname="analyst_ui"
,user="postgres"
,password = "D0CK3R!12"
)
data <- read.csv("ECOSOC.csv")
list.of.packages <- c("data.table","dotenv", "dplyr","httr","openxlsx")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
rm(list.of.packages,new.packages)
data <- read.csv("input/ECOSOC.csv")
data <- read.csv("input/ECOSOC IATI.csv")
data <- read.csv("input/ECOSOC IATI.csv")
getwd()
getwd()
list.of.packages <- c("data.table","dotenv", "dplyr","httr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
rm(list.of.packages,new.packages)
list.files()
list.of.packages <- c("data.table","dotenv", "dplyr","httr")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages)
lapply(list.of.packages, require, character.only=T)
rm(list.of.packages,new.packages)
list.files()
# Stage 1: Manually input the filename you choose. Read-in and convert to data frame.
filename = "budgets-2022-06-01"
load(file=paste0(filename,".RDa"))
install.packages("pdftools","reshape2")
library(pdftools)
library(reshape2)
# you can use an url or a path
pdf_url <- "https://www.oecd.org/dac/financing-sustainable-development/development-finance-standards/ODA-2021-summary.pdf"
# `pdf_text` converts it to a list
list_output <- pdftools::pdf_data(pdf_url)
list.of.packages <- c("data.table","RPostgreSQL","reshape2","here","tiff","raster","maptools","sp","geosphere")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.us.r-project.org")
lapply(list.of.packages, require, character.only=T)
# https://www.neonscience.org/resources/learning-hub/tutorials/raster-data-r
# https://www.neonscience.org/resources/learning-hub/tutorials/extract-values-rasters-r
setwd("C:/git/fao-wapor")
world <- readShapeSpatial("ne_10m_admin_0_countries.shp")
map <- world[world$ADMIN=="South Sudan",1]
read_file2 <- crop(read_file, extent(map))
read_file3 <- mask(read_file2, map)
plot(read_file3)
list.of.packages <- c("data.table","RPostgreSQL","reshape2","here","tiff","raster","maptools","sp","geosphere")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.us.r-project.org")
lapply(list.of.packages, require, character.only=T)
# https://www.neonscience.org/resources/learning-hub/tutorials/raster-data-r
# https://www.neonscience.org/resources/learning-hub/tutorials/extract-values-rasters-r
setwd("C:/git/fao-wapor")
# Reading in shape file data and raster
world <- readShapeSpatial("ne_10m_admin_0_countries.shp")
map <- world[world$ADMIN=="South Sudan",1]
# Point up shape file
destPoint_v <- function (x, y, b, d, a = 6378137, f = 1/298.257223563, ...)
{
r <- list(...)$r
if (!is.null(r)) {
return(.old_destPoint(x, y, b, d, r = r))
}
b <- as.vector(b)
d <- as.vector(d)
x <- as.vector(x)
y <- as.vector(y)
p <- cbind(x, y, b, d)
r <- .Call("_geodesic", as.double(p[, 1]), as.double(p[, 2]),
as.double(p[, 3]), as.double(p[, 4]),
as.double(a), as.double(f),
PACKAGE = "geosphere")
r <- matrix(r, ncol = 3, byrow = TRUE)
colnames(r) <- c("lon", "lat", "finalbearing")
return(r[, 1:2, drop = FALSE])
}
dist <- 500
bbox <- raster::extent(map)
# Calculate number of points on the vertical axis.
ny <- ceiling(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmin, bbox@ymax)) / dist)
# Calculate maximum number of points on the horizontal axis.
# This needs to be calculated for the lowermost and uppermost horizontal lines
# as the distance between latitudinal lines varies when the longitude changes.
nx <- ceiling(max(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmax, bbox@ymin)) / dist,
geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymax),
p2 = c(bbox@xmax, bbox@ymax)) / dist))
# Create result data frame with number of points on vertical axis.
df <- data.frame(ny = 1:ny)
# Calculate coordinates along the vertical axis.
pts <- geosphere::destPoint(p = c(bbox@xmin, bbox@ymin),
b = 0, d = dist * (1:ny - 1))
df$x <- pts[, 1]
df$y <- pts[, 2]
# Add points on horizontal axis.
df <- tidyr::crossing(nx = 1:nx, df)
# Calculate coordinates.
pts <- destPoint_v(df$x, df$y, b = 90, 500 * (df$nx - 1))
# Turn coordinates into SpatialPoints.
pts <- SpatialPoints(cbind(pts[, 1], pts[, 2]), proj4string = CRS(proj4string(map)))
# Cut to boundaries of map.
result <- raster::intersect(pts, map)
# Plot result.
plot(result)
destPoint_v <- function (x, y, b, d, a = 6378137, f = 1/298.257223563, ...)
{
r <- list(...)$r
if (!is.null(r)) {
return(.old_destPoint(x, y, b, d, r = r))
}
b <- as.vector(b)
d <- as.vector(d)
x <- as.vector(x)
y <- as.vector(y)
p <- cbind(x, y, b, d)
r <- .Call("_geodesic", as.double(p[, 1]), as.double(p[, 2]),
as.double(p[, 3]), as.double(p[, 4]),
as.double(a), as.double(f),
PACKAGE = "geosphere")
r <- matrix(r, ncol = 3, byrow = TRUE)
colnames(r) <- c("lon", "lat", "finalbearing")
return(r[, 1:2, drop = FALSE])
}
dist <- 5000
bbox <- raster::extent(map)
# Calculate number of points on the vertical axis.
ny <- ceiling(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmin, bbox@ymax)) / dist)
# Calculate maximum number of points on the horizontal axis.
# This needs to be calculated for the lowermost and uppermost horizontal lines
# as the distance between latitudinal lines varies when the longitude changes.
nx <- ceiling(max(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmax, bbox@ymin)) / dist,
geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymax),
p2 = c(bbox@xmax, bbox@ymax)) / dist))
# Create result data frame with number of points on vertical axis.
df <- data.frame(ny = 1:ny)
# Calculate coordinates along the vertical axis.
pts <- geosphere::destPoint(p = c(bbox@xmin, bbox@ymin),
b = 0, d = dist * (1:ny - 1))
df$x <- pts[, 1]
df$y <- pts[, 2]
# Add points on horizontal axis.
df <- tidyr::crossing(nx = 1:nx, df)
# Calculate coordinates.
pts <- destPoint_v(df$x, df$y, b = 90, 500 * (df$nx - 1))
# Turn coordinates into SpatialPoints.
pts <- SpatialPoints(cbind(pts[, 1], pts[, 2]), proj4string = CRS(proj4string(map)))
# Cut to boundaries of map.
result <- raster::intersect(pts, map)
# Plot result.
plot(result)
title("S.Sudan in Points")
source("C:/git/fao-wapor/code/wapor.R", echo=TRUE)
list.of.packages <- c("data.table","RPostgreSQL","reshape2","here","tiff","raster","maptools","sp","geosphere")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.us.r-project.org")
lapply(list.of.packages, require, character.only=T)
# https://www.neonscience.org/resources/learning-hub/tutorials/raster-data-r
# https://www.neonscience.org/resources/learning-hub/tutorials/extract-values-rasters-r
setwd("C:/git/fao-wapor")
# Reading in shape file data and raster
world <- readShapeSpatial("ne_10m_admin_0_countries.shp")
map <- world[world$ADMIN=="South Sudan",1]
destPoint_v <- function (x, y, b, d, a = 6378137, f = 1/298.257223563, ...)
{
r <- list(...)$r
if (!is.null(r)) {
return(.old_destPoint(x, y, b, d, r = r))
}
b <- as.vector(b)
d <- as.vector(d)
x <- as.vector(x)
y <- as.vector(y)
p <- cbind(x, y, b, d)
r <- .Call("_geodesic", as.double(p[, 1]), as.double(p[, 2]),
as.double(p[, 3]), as.double(p[, 4]),
as.double(a), as.double(f),
PACKAGE = "geosphere")
r <- matrix(r, ncol = 3, byrow = TRUE)
colnames(r) <- c("lon", "lat", "finalbearing")
return(r[, 1:2, drop = FALSE])
}
dist <- 5000
bbox <- raster::extent(map)
# Calculate number of points on the vertical axis.
ny <- ceiling(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmin, bbox@ymax)) / dist)
# Calculate maximum number of points on the horizontal axis.
# This needs to be calculated for the lowermost and uppermost horizontal lines
# as the distance between latitudinal lines varies when the longitude changes.
nx <- ceiling(max(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmax, bbox@ymin)) / dist,
geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymax),
p2 = c(bbox@xmax, bbox@ymax)) / dist))
# Create result data frame with number of points on vertical axis.
df <- data.frame(ny = 1:ny)
# Calculate coordinates along the vertical axis.
pts <- geosphere::destPoint(p = c(bbox@xmin, bbox@ymin),
b = 0, d = dist * (1:ny - 1))
df$x <- pts[, 1]
df$y <- pts[, 2]
# Add points on horizontal axis.
df <- tidyr::crossing(nx = 1:nx, df)
# Calculate coordinates.
pts <- destPoint_v(df$x, df$y, b = 90, 500 * (df$nx - 1))
# Turn coordinates into SpatialPoints.
pts <- SpatialPoints(cbind(pts[, 1], pts[, 2]), proj4string = CRS(proj4string(map)))
# Cut to boundaries of map.
result <- raster::intersect(pts, map)
# Plot result.
plot(result)
title("S.Sudan in Points")
# END
list.of.packages <- c("data.table","RPostgreSQL","reshape2","here","tiff","raster","maptools","sp","geosphere")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.us.r-project.org")
lapply(list.of.packages, require, character.only=T)
# https://www.neonscience.org/resources/learning-hub/tutorials/raster-data-r
# https://www.neonscience.org/resources/learning-hub/tutorials/extract-values-rasters-r
setwd("C:/git/fao-wapor")
# Reading in shape file data and raster
world <- readShapeSpatial("ne_10m_admin_0_countries.shp")
map <- world[world$ADMIN=="South Sudan",1]
# Read in the raster data from WAPOR
str_name<-'L1_QUAL-NDVI_LT.tif'
read_file<-raster(str_name)
read_file<-rasterize(read_file)
plot(read_file)
# Join
read_file2 <- crop(read_file, extent(map))
read_file3 <- mask(read_file2, map)
plot(read_file3)
# Point up shape file
destPoint_v <- function (x, y, b, d, a = 6378137, f = 1/298.257223563, ...)
{
r <- list(...)$r
if (!is.null(r)) {
return(.old_destPoint(x, y, b, d, r = r))
}
b <- as.vector(b)
d <- as.vector(d)
x <- as.vector(x)
y <- as.vector(y)
p <- cbind(x, y, b, d)
r <- .Call("_geodesic", as.double(p[, 1]), as.double(p[, 2]),
as.double(p[, 3]), as.double(p[, 4]),
as.double(a), as.double(f),
PACKAGE = "geosphere")
r <- matrix(r, ncol = 3, byrow = TRUE)
colnames(r) <- c("lon", "lat", "finalbearing")
return(r[, 1:2, drop = FALSE])
}
dist <- 5000
bbox <- raster::extent(map)
# Calculate number of points on the vertical axis.
ny <- ceiling(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmin, bbox@ymax)) / dist)
# Calculate maximum number of points on the horizontal axis.
# This needs to be calculated for the lowermost and uppermost horizontal lines
# as the distance between latitudinal lines varies when the longitude changes.
nx <- ceiling(max(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmax, bbox@ymin)) / dist,
geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymax),
p2 = c(bbox@xmax, bbox@ymax)) / dist))
# Create result data frame with number of points on vertical axis.
df <- data.frame(ny = 1:ny)
# Calculate coordinates along the vertical axis.
pts <- geosphere::destPoint(p = c(bbox@xmin, bbox@ymin),
b = 0, d = dist * (1:ny - 1))
df$x <- pts[, 1]
df$y <- pts[, 2]
# Add points on horizontal axis.
df <- tidyr::crossing(nx = 1:nx, df)
# Calculate coordinates.
pts <- destPoint_v(df$x, df$y, b = 90, 500 * (df$nx - 1))
# Turn coordinates into SpatialPoints.
pts <- SpatialPoints(cbind(pts[, 1], pts[, 2]), proj4string = CRS(proj4string(map)))
# Cut to boundaries of map.
result <- raster::intersect(pts, map)
# Plot result.
plot(result)
title("S.Sudan in Points")
list.of.packages <- c("data.table","RPostgreSQL","reshape2","here","tiff","raster","maptools","sp","geosphere")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.us.r-project.org")
lapply(list.of.packages, require, character.only=T)
# https://www.neonscience.org/resources/learning-hub/tutorials/raster-data-r
# https://www.neonscience.org/resources/learning-hub/tutorials/extract-values-rasters-r
setwd("C:/git/fao-wapor")
# Reading in shape file data and raster
world <- readShapeSpatial("ne_10m_admin_0_countries.shp")
map <- world[world$ADMIN=="South Sudan",1]
# Read in the raster data from WAPOR
str_name<-'L1_QUAL-NDVI_LT.tif'
read_file<-raster(str_name)
read_file<-rasterize(read_file)
plot(read_file)
# Join
read_file2 <- crop(read_file, extent(map))
read_file3 <- mask(read_file2, map)
plot(read_file3)
# Point up shape file
destPoint_v <- function (x, y, b, d, a = 6378137, f = 1/298.257223563, ...)
{
r <- list(...)$r
if (!is.null(r)) {
return(.old_destPoint(x, y, b, d, r = r))
}
b <- as.vector(b)
d <- as.vector(d)
x <- as.vector(x)
y <- as.vector(y)
p <- cbind(x, y, b, d)
r <- .Call("_geodesic", as.double(p[, 1]), as.double(p[, 2]),
as.double(p[, 3]), as.double(p[, 4]),
as.double(a), as.double(f),
PACKAGE = "geosphere")
r <- matrix(r, ncol = 3, byrow = TRUE)
colnames(r) <- c("lon", "lat", "finalbearing")
return(r[, 1:2, drop = FALSE])
}
dist <- 600
bbox <- raster::extent(map)
# Calculate number of points on the vertical axis.
ny <- ceiling(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmin, bbox@ymax)) / dist)
# Calculate maximum number of points on the horizontal axis.
# This needs to be calculated for the lowermost and uppermost horizontal lines
# as the distance between latitudinal lines varies when the longitude changes.
nx <- ceiling(max(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmax, bbox@ymin)) / dist,
geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymax),
p2 = c(bbox@xmax, bbox@ymax)) / dist))
# Create result data frame with number of points on vertical axis.
df <- data.frame(ny = 1:ny)
# Calculate coordinates along the vertical axis.
pts <- geosphere::destPoint(p = c(bbox@xmin, bbox@ymin),
b = 0, d = dist * (1:ny - 1))
df$x <- pts[, 1]
df$y <- pts[, 2]
# Add points on horizontal axis.
df <- tidyr::crossing(nx = 1:nx, df)
# Calculate coordinates.
pts <- destPoint_v(df$x, df$y, b = 90, 500 * (df$nx - 1))
# Turn coordinates into SpatialPoints.
pts <- SpatialPoints(cbind(pts[, 1], pts[, 2]), proj4string = CRS(proj4string(map)))
# Cut to boundaries of map.
result <- raster::intersect(pts, map)
# Plot result.
plot(result)
title("S.Sudan in Points")
list.of.packages <- c("data.table","RPostgreSQL","reshape2","here","tiff","raster","maptools","sp","geosphere")
new.packages <- list.of.packages[!(list.of.packages %in% installed.packages()[,"Package"])]
if(length(new.packages)) install.packages(new.packages, repos="http://cran.us.r-project.org")
lapply(list.of.packages, require, character.only=T)
# https://www.neonscience.org/resources/learning-hub/tutorials/raster-data-r
# https://www.neonscience.org/resources/learning-hub/tutorials/extract-values-rasters-r
setwd("C:/git/fao-wapor")
# Reading in shape file data and raster
world <- readShapeSpatial("ne_10m_admin_0_countries.shp")
map <- world[world$ADMIN=="South Sudan",1]
destPoint_v <- function (x, y, b, d, a = 6378137, f = 1/298.257223563, ...)
{
r <- list(...)$r
if (!is.null(r)) {
return(.old_destPoint(x, y, b, d, r = r))
}
b <- as.vector(b)
d <- as.vector(d)
x <- as.vector(x)
y <- as.vector(y)
p <- cbind(x, y, b, d)
r <- .Call("_geodesic", as.double(p[, 1]), as.double(p[, 2]),
as.double(p[, 3]), as.double(p[, 4]),
as.double(a), as.double(f),
PACKAGE = "geosphere")
r <- matrix(r, ncol = 3, byrow = TRUE)
colnames(r) <- c("lon", "lat", "finalbearing")
return(r[, 1:2, drop = FALSE])
}
dist <- 300
bbox <- raster::extent(map)
# Calculate number of points on the vertical axis.
ny <- ceiling(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmin, bbox@ymax)) / dist)
# Calculate maximum number of points on the horizontal axis.
# This needs to be calculated for the lowermost and uppermost horizontal lines
# as the distance between latitudinal lines varies when the longitude changes.
nx <- ceiling(max(geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymin),
p2 = c(bbox@xmax, bbox@ymin)) / dist,
geosphere::distGeo(p1 = c(bbox@xmin, bbox@ymax),
p2 = c(bbox@xmax, bbox@ymax)) / dist))
# Create result data frame with number of points on vertical axis.
df <- data.frame(ny = 1:ny)
# Calculate coordinates along the vertical axis.
pts <- geosphere::destPoint(p = c(bbox@xmin, bbox@ymin),
b = 0, d = dist * (1:ny - 1))
df$x <- pts[, 1]
df$y <- pts[, 2]
# Add points on horizontal axis.
df <- tidyr::crossing(nx = 1:nx, df)
# Calculate coordinates.
pts <- destPoint_v(df$x, df$y, b = 90, 500 * (df$nx - 1))
# Turn coordinates into SpatialPoints.
pts <- SpatialPoints(cbind(pts[, 1], pts[, 2]), proj4string = CRS(proj4string(map)))
# Cut to boundaries of map.
result <- raster::intersect(pts, map)
# Plot result.
plot(result)
title("S.Sudan in Points")
# END
